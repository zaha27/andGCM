#!/usr/bin/env python3

import sys
import os

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, os.path.join(SCRIPT_DIR))

import argparse
import subprocess
from core.diff_parser import analyze_diff
from core.formatter import render_preview
from config.config_loader import load_config, update_config_key

def main():
    parser = argparse.ArgumentParser(description="GCM - Git Commit Message Enhancer")
    parser.add_argument("--smart", action="store_true", help="Analyze current staged changes and generate commit message")
    parser.add_argument("--auto-commit", action="store_true", help="Automatically run git commit with generated message")
    parser.add_argument("--style", help="Commit message style: conventional | corporate | fun")
    parser.add_argument("--visual-style", help="Preview style: default | minimal | markdown | boxed")
    parser.add_argument("--set", nargs=2, metavar=("KEY", "VALUE"), help="Update config key in .gcmconfig")

    args = parser.parse_args()

    if args.set:
        key, value = args.set
        update_config_key(key, value)
        return

    config = load_config()
    style = args.style if args.style else config["default_style"]
    visual_style = args.visual_style if args.visual_style else config["visual_preview"]
    auto_commit = args.auto_commit or config["auto_commit"]

    if args.smart:
        message, summaries, commit_type = analyze_diff(style=style)
        render_preview(message, summaries, style=visual_style)

        if auto_commit:
            subprocess.run(['git', 'commit', '-m', message])
    else:
        print("\nüß† Use --smart to analyze current staged changes.")
        print("‚öôÔ∏è  Or use --set to update config keys.")
        print("üìò Example: gcm --smart --auto-commit --style corporate")

if __name__ == "__main__":
    main()